import argparse
import cv2
import itertools
import os

import numpy as np
np.set_printoptions(precision = 2)

import openface

fileDir = "/root/openface/"
modelDir = os.path.join(fileDir, 'models')
dlibModelDir = os.path.join(modelDir, 'dlib')
openfaceModelDir = os.path.join(modelDir, 'openface')

dlibFacePredictor = os.path.join(dlibModelDir, "shape_predictor_68_face_landmarks.dat")
networkModel = os.path.join(openfaceModelDir, 'nn4.small2.v1.t7')
imgDim = 96

align = openface.AlignDlib(dlibFacePredictor)
net = openface.TorchNeuralNet(networkModel, imgDim)

def findAndAlignFace(rgbImg):
    bb = align.getLargestFaceBoundingBox(rgbImg)
    if bb is None:
        raise Exception("Unable to find a face: {}".format(imgPath))
    alignedFace = align.align(imgDim, rgbImg, bb, landmarkIndices=openface.AlignDlib.OUTER_EYES_AND_NOSE)
    if alignedFace is None:
        raise Exception("Unable to align image: {}".format(imgPath))
    return alignedFace

def getRep(imgPath):
    # Load image
    bgrImg = cv2.imread(imgPath)
    if bgrImg is None:
        raise Exception("Unable to load image: {}".format(imgPath))

    # Convert color space from BGR to RGB
    rgbImg = cv2.cvtColor(bgrImg, cv2.COLOR_BGR2RGB)

    alignedFace = findAndAlignFace(rgbImg)

    # Calculate the representation
    rep = net.forward(alignedFace)
    return rep

import os

knownFacesDir = "/root/9ldfaces/"
knownFaces = {}

# Assumption: all regular files in this directory are image files with faces in them
for f in os.listdir(knownFacesDir):
    imgPath = os.path.join(knownFacesDir, f)
    if (os.path.isfile(imgPath)):
        name = os.path.splitext(f)[0]
        knownFaces[name] = {}
        knownFaces[name]['imgPath'] = imgPath
        rep = getRep(knownFaces[name]['imgPath'])
        knownFaces[name]['rep'] = rep

print(knownFaces)
print(knownFaces["szeliga"]["rep"] - knownFaces["albrycht"]["rep"])

import pickle
fp = open("./knownFaces.pickle", "w")
pickle.dump(knownFaces, fp)
fp.close()
